// automatically generated by Xtext
grammar org.xtext.quality.QualityDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/quality_requirements_metamodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Dashboard returns Dashboard:
	'Dashboard'
	id=EString
	'{'
		'architectures' '{' architectures+=Architecture ( "," architectures+=Architecture)* '}' 
		'metrics' '{' metrics+=ResponseMetric ( "," metrics+=ResponseMetric)* '}' 
		'scenarios' '{' scenarios+=QualityScenario ( "," scenarios+=QualityScenario)* '}' 
	'}';





Architecture returns Architecture:
	'Architecture'
	name=EString
	'{'
		'services' '{' services+=Stimulus ( "," services+=Stimulus)* '}' 
	'}';

ResponseMetric returns ResponseMetric:
	{ResponseMetric}
	'ResponseMetric'
	name=EString
	'{'
		('metric' metric=Metrics)?
		('operator' operator=RelationalOperators)?
		('value' value=EBigDecimal)?
		('unit' unit=Units)?
	'}';

QualityScenario returns QualityScenario:
	'QualityScenario'
	name=EString
	'{'
		('testResult' testResult=EBigDecimal)?
		'responseMetric' responseMetric=[ResponseMetric|EString]
		'service' service=[Stimulus|EString]
	'}';

EString returns ecore::EString:
	STRING | ID;

Stimulus returns Stimulus:
	{Stimulus}
	'Stimulus'
	name=EString;

enum Metrics returns Metrics:
				RESPONSE_TIME = 'RESPONSE_TIME' | AVERAGE_TIME = 'AVERAGE_TIME' | MAX_RESPONSE_TIME = 'MAX_RESPONSE_TIME' | RESPONSE_TIME_90 = 'RESPONSE_TIME_90' | MEDIAN = 'MEDIAN' | ERROR_PERCENTAGE = 'ERROR_PERCENTAGE' | TROUGHPUT = 'TROUGHPUT' | BANDWIDTH = 'BANDWIDTH' | STANDARD_VARIATION = 'STANDARD_VARIATION' | THREAD_NUMBER = 'THREAD_NUMBER' | TEST_TIME = 'TEST_TIME' | LATENCY = 'LATENCY' | SERVICE = 'SERVICE' | ELAPSED_TIME = 'ELAPSED_TIME' | CODE_TIMES = 'CODE_TIMES' | THREAD_RESPONSE_TIME = 'THREAD_RESPONSE_TIME' | THREAD_RESPONSE_PERC = 'THREAD_RESPONSE_PERC';

enum RelationalOperators returns RelationalOperators:
				FEWER_THAN = 'FEWER_THAN' | GREATER_THAN = 'GREATER_THAN' | GREATER_EQ_THAN = 'GREATER_EQ_THAN' | FEWER_EQ_THAN = 'FEWER_EQ_THAN' | DIFFERENT = 'DIFFERENT' | EQUAL = 'EQUAL';

EBigDecimal returns ecore::EBigDecimal:
	INT? '.' INT;

enum Units returns Units:
				MILLISECONDS = 'MILLISECONDS' | REQUESTS_PER_SEC = 'REQUESTS_PER_SEC';
